Shader "Custom/URP/GlitchTextShader"
{
    Properties
    {
        _MainTex("Main Texture", 2D) = "white" {}
        _GlitchStrength("Glitch Strength", Range(0,1)) = 0
        _TintColor("Tint Color", Color) = (1,1,1,1)
    }

    SubShader
    {
        Tags { "RenderPipeline" = "UniversalPipeline" "RenderType"="Transparent" }
        LOD 200

        Pass
        {
            Name "FORWARD"
            Tags { "LightMode" = "UniversalForward" }

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            float4 _TintColor;
            float _GlitchStrength;

            v2f vert(appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                return o;
            }

            // simple pseudo-random function for glitch
            float rand(float2 co)
            {
                return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
            }

            fixed4 frag(v2f i) : SV_Target
            {
                // base UV
                float2 uv = i.uv;

                // apply glitch horizontal distortion
                float glitchOffset = (rand(float2(floor(uv.y * 100.0), _Time.y)) - 0.5) * 0.1 * _GlitchStrength;
                uv.x += glitchOffset;

                // chromatic aberration (RGB channel shifts)
                float2 uvR = uv + float2(0.002 * _GlitchStrength, 0);
                float2 uvB = uv - float2(0.002 * _GlitchStrength, 0);

                float r = tex2D(_MainTex, uvR).r;
                float g = tex2D(_MainTex, uv).g;
                float b = tex2D(_MainTex, uvB).b;

                fixed4 col = float4(r, g, b, tex2D(_MainTex, uv).a);

                // apply tint
                col.rgb *= _TintColor.rgb;
                col.a *= _TintColor.a;

                return col;
            }
            ENDHLSL
        }
    }

    FallBack "Unlit/Texture"
}
